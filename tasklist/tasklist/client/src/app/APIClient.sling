import jk.widget.web
import jk.ui
import jk.widget

class is JSONAPIClientWithGui:

pvar widgetDefaultErrorHandler as function<void, Error>
var instance static as this

func getInstance static as this:
    return instance

func create(context as GuiApplicationContext, parentWidget as Widget = null) static as this
{
    assert context
    instance = new this()
    instance.setApiUrl("http://ec2-54-254-239-223.ap-southeast-1.compute.amazonaws.com:30998") /* Server http*/
    instance.setContext(context)
    if parentWidget:
        instance.setParentWidget(parentWidget)
    return instance
} 

func onError(error as Error, callback as function<void,Error>) override
{
    assert callback:
        onDefaultErrorHandler(error)
    base.onError(error, callback)
}

func onDefaultErrorHandler(error as Error) override
{
    var context = assert getContext()
    assert widgetDefaultErrorHandler:
        context.showErrorDialog(error.toString())
    widgetDefaultErrorHandler(error)
}

func addInfo(data as DynamicMap, callback as function<void, DynamicMap>, errorCallback as function<void, Error>):
    doPost("/info", data, callback, errorCallback)

func updateInfo(id as string, data as DynamicMap, callback as function<void, DynamicMap>, errorCallback as function<void, Error>):
    doPut("/info" .. id, data, callback, errorCallback)

func deleteInfo(id as string, callback as function<void, DynamicMap>, errorCallback as function<void, Error>):
    doDelete("/info" .. id, callback, errorCallback)

func getInfo(callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
    doGet("/info", callback, errorCallback)
